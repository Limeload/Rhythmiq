{"ast":null,"code":"let accessToken;\nconst Spotify = {\n  accessToken: null,\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check for an access token match in the URL\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      // This clears the parameters, allowing us to grab a new access token when it expires.\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const clientId = 'YOUR_CLIENT_ID'; // Replace with your own client ID\n      const redirectUri = 'http://localhost:3000/'; // Set this to your own redirect URI\n\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n    }\n  },\n  search(term) {\n    const accessToken = this.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","clientId","redirectUri","search","term","fetch","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","length","userId"],"sources":["/Users/shraddharao/Development/code/hackathon_april/rythmiq/src/util/Spotify.js"],"sourcesContent":["let accessToken;\n\nconst Spotify = {\n    accessToken: null,\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check for an access token match in the URL\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      // This clears the parameters, allowing us to grab a new access token when it expires.\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const clientId = 'YOUR_CLIENT_ID'; // Replace with your own client ID\n      const redirectUri = 'http://localhost:3000/'; // Set this to your own redirect URI\n\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n    }\n  },\n\n  search(term) {\n    const accessToken = this.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    }, networkError => {\n      console.log(networkError.message);\n    })\n    .then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', { headers: headers })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        userId = jsonResponse.id;\n      })\n  }\n\n};\n\nexport default Spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}